---
# DOWNLOAD AND EXTRACT HADOOP
- name: Download Hadoop 3.4.0 locally (if not exists)
  delegate_to: localhost
  become: false
  ansible.builtin.get_url:
    url: https://downloads.apache.org/hadoop/common/hadoop-3.4.0/hadoop-3.4.0.tar.gz
    dest: ./files/hadoop-3.4.0.tar.gz
    mode: '0644'
  when: not lookup('ansible.builtin.fileglob', './files/hadoop-3.4.0.tar.gz')

- name: Copy Hadoop archive to all nodes
  become: yes
  ansible.builtin.copy:
    src: ./files/hadoop-3.4.0.tar.gz
    dest: /home/hadoop/hadoop-3.4.0.tar.gz
    owner: hadoop
    group: hadoop
    mode: '0644'

- name: Extract Hadoop on NameNode and DataNodes
  become: yes
  ansible.builtin.unarchive:
    src: /home/hadoop/hadoop-3.4.0.tar.gz
    dest: /home/hadoop/
    remote_src: yes
    owner: hadoop
    group: hadoop
  when: inventory_hostname in ['nn', 'dn-00', 'dn-01']


# JAVA CONFIGURATION
- name: Find JAVA_HOME on localhost
  delegate_to: localhost
  delegate_facts: true
  become: yes
  ansible.builtin.shell: "dirname $(dirname $(readlink -f $(which java)))"
  register: java_home_result
  run_once: true

- name: Set JAVA_HOME globally
  ansible.builtin.set_fact:
    java_home_global: "{{ java_home_result.stdout }}"

- name: Configure JAVA_HOME in hadoop-env.sh
  become: yes
  ansible.builtin.lineinfile:
    path: /home/hadoop/hadoop-3.4.0/etc/hadoop/hadoop-env.sh
    regexp: '^export JAVA_HOME='
    line: "export JAVA_HOME={{ java_home_global }}"
    owner: hadoop
    group: hadoop
  when: inventory_hostname in ['nn', 'dn-00', 'dn-01']

- name: Add Hadoop environment variables to .profile
  become: yes
  ansible.builtin.blockinfile:
    path: /home/hadoop/.profile
    owner: hadoop
    group: hadoop
    create: yes
    mode: '0644'
    block: |
      export JAVA_HOME={{ java_home_global }}
      export HADOOP_HOME=/home/hadoop/hadoop-3.4.0
      export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin
  when: inventory_hostname in ['nn', 'dn-00', 'dn-01']

# HADOOP CONFIGURATION FILES
- name: Replace core-site.xml
  become: yes
  ansible.builtin.template:
    src: core-site.xml.j2
    dest: /home/hadoop/hadoop-3.4.0/etc/hadoop/core-site.xml
    owner: hadoop
    group: hadoop
    mode: '0644'
  when: inventory_hostname in ['nn', 'dn-00', 'dn-01']

- name: Replace hdfs-site.xml
  become: yes
  ansible.builtin.template:
    src: hdfs-site.xml.j2
    dest: /home/hadoop/hadoop-3.4.0/etc/hadoop/hdfs-site.xml
    owner: hadoop
    group: hadoop
    mode: '0644'
  when: inventory_hostname in ['nn', 'dn-00', 'dn-01']

- name: Replace workers file
  become: yes
  ansible.builtin.template:
    src: workers.j2
    dest: /home/hadoop/hadoop-3.4.0/etc/hadoop/workers
    owner: hadoop
    group: hadoop
    mode: '0644'
  when: inventory_hostname in ['nn', 'dn-00', 'dn-01']

# HDFS FORMAT AND STARTUP
- name: Format HDFS namenode (only once)
  become: yes
  ansible.builtin.shell: |
    su - hadoop -c "source /home/hadoop/.profile && hdfs namenode -format -force"
  args:
    chdir: /home/hadoop/hadoop-3.4.0
  when: inventory_hostname == 'nn'

- name: Start HDFS daemons
  become: yes
  ansible.builtin.shell: |
    su - hadoop -c "source /home/hadoop/.profile && start-dfs.sh"
  args:
    chdir: /home/hadoop/hadoop-3.4.0
  when: inventory_hostname == 'nn'

# VERIFY WEB UI
- name: Verify NameNode Web UI is reachable
  become: no
  ansible.builtin.uri:
    url: "http://{{ inventory_hostname }}:9870"
    return_content: no
    status_code: 200
    timeout: 5
  register: namenode_ui
  retries: 5
  delay: 10
  until: namenode_ui.status == 200
  when: inventory_hostname == 'nn'

# CHECK LOGS FOR ERRORS AND EXCEPTIONS
- name: Check logs for ERROR
  become: yes
  vars:
    hadoop_log_dir: "/home/hadoop/hadoop-3.4.0/logs"
  ansible.builtin.shell: "grep -i 'error' {{ hadoop_log_dir }}/*.log || true"
  register: error_logs
  changed_when: false
  ignore_errors: yes

- name: Check logs for Exception
  become: yes
  vars:
    hadoop_log_dir: "/home/hadoop/hadoop-3.4.0/logs"
  ansible.builtin.shell: "grep -i 'Exception' {{ hadoop_log_dir }}/*.log || true"
  register: exception_logs
  changed_when: false
  ignore_errors: yes

- name: Print logs summary
  ansible.builtin.debug:
    msg: |
      Logs summary for {{ inventory_hostname }}:
      ERROR lines:
      {{ error_logs.stdout if error_logs.stdout != "" else "No ERRORs found" }}
      Exception lines:
      {{ exception_logs.stdout if exception_logs.stdout != "" else "No Exceptions found" }}


# VERIFY HDFS PROCESSES
- name: Verify HDFS is running on all nodes
  become: yes
  ansible.builtin.shell: |
    su - hadoop -c "jps"
  register: jps_output
  ignore_errors: true
  when: inventory_hostname in ['nn', 'dn-00', 'dn-01']

- name: Print Java processes summary
  ansible.builtin.debug:
    msg: "{{ inventory_hostname }} running: {{ jps_output.stdout_lines | default([]) }}"
  when: inventory_hostname in ['nn', 'dn-00', 'dn-01']

